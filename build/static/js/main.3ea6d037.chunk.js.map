{"version":3,"sources":["_nav.js","counties.js","MapChart.js","florida.js","polyfill.js","App.js","serviceWorker.js","index.js"],"names":["items","name","url","title","wrapper","element","attributes","class","children","divider","Counties","a","fcounties","fetch","response","json","data","i","length","provinceState","push","memo","setTooltipContent","data-tip","projectionConfig","scale","width","height","style","float","onMoveStart","console","log","center","geography","geographies","map","geo","key","rsmKey","onClick","county","properties","NAME","navigation","onMouseEnter","counties","admin2","confirmed","deaths","onMouseLeave","default","fill","outline","hover","pressed","Florida","useState","content","setContent","multiline","html","window","CustomEvent","event","params","bubbles","cancelable","detail","undefined","evt","document","createEvent","initCustomEvent","prototype","Event","DefaultLayout","React","lazy","Page404","Page500","App","Suspense","fallback","className","exact","path","render","props","Component","Boolean","location","hostname","match","ReactDOM","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3ea6d037.chunk.js","sourcesContent":["const county = 'Orange';\r\n\r\nexport default {\r\n  items: [\r\n    {\r\n      name: county,\r\n      url: '/dashboard',\r\n    },\r\n    {\r\n      title: true,\r\n      name: 'Orange County Current Status',\r\n      wrapper: {            // optional wrapper object\r\n        element: '',        // required valid HTML5 element tag\r\n        attributes: {}        // optional valid JS object with JS API naming ex: { className: \"my-class\", style: { fontFamily: \"Verdana\" }, id: \"my-id\"}\r\n      },\r\n      class: ''             // optional class names space delimited list for title item ex: \"text-center\"\r\n    },\r\n    {\r\n      name: 'State of Emergency',\r\n      url: '/',\r\n    },\r\n    {\r\n      name: 'Current Restrictions',\r\n      url: '/',\r\n\r\n    },\r\n    {\r\n      title: true,\r\n      name: 'Orange County Resources',\r\n      wrapper: {\r\n        element: '',\r\n        attributes: {},\r\n      },\r\n    },\r\n    {\r\n      name: 'Testing Locations',\r\n      children: [\r\n        {\r\n          name: 'Location 1',\r\n        },\r\n        {\r\n          name: 'Location 2',\r\n        },\r\n        {\r\n          name: 'Location 3',\r\n        },\r\n      ],\r\n    },\r\n    {\r\n      name: 'Plan for Floridaâ€™s Recovery.',\r\n      url: 'https://www.flgov.com/wp-content/uploads/covid19/Taskforce%20Report.pdf',\r\n    },\r\n    {\r\n      divider: true,\r\n    },\r\n  ],\r\n};\r\n","import React, { useState } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport ReactTooltip from \"react-tooltip\";\r\n\r\nconst confirmed_url = \"https://covid19.mathdro.id/api/countries/USA/confirmed\";\r\nconst Counties = async () => {\r\nlet fcounties =[];\r\nconst response = await fetch(confirmed_url);\r\nconst data = await response.json();\r\nfor (let i = 0; i < data.length; i++) {\r\n  if(data[i].provinceState==\"Florida\")\r\n  {\r\n    fcounties.push(data[i]);\r\n\r\n  }\r\n}\r\n\r\nreturn fcounties;\r\n}\r\n\r\nexport default Counties;\r\n","import React, { memo,useState } from \"react\";\r\nimport {\r\n  ZoomableGroup,\r\n  ComposableMap,\r\n  Geographies,\r\n  Geography\r\n} from \"react-simple-maps\";\r\n\r\nimport Counties from \"./counties\";\r\nimport navigation from './_nav';\r\n\r\nconst geoUrl =\r\n  \"https://raw.githubusercontent.com/wrislin1/CovidProject/master/Prototype/florida2.json\";\r\n\r\nconst change_county = (county) =>{\r\n  navigation.items[0].name = county;\r\n  //navigation.items[5].children[0] = \"Hello There\";\r\n\r\n}\r\n\r\n\r\nconst MapChart = ({ setTooltipContent }) => {\r\n\r\n  return (\r\n    <>\r\n      <ComposableMap data-tip=\"\"\r\n      projectionConfig={{ scale: 3000 }}\r\n   width={800}\r\n   height={400}\r\n   style={{\r\n   width: \"50%\",\r\n   height: \"25%\",\r\n   float: \"right\",\r\n\r\n}}\r\n>\r\n<ZoomableGroup onMoveStart={()=>{console.log(\"hello\")}} center={[ -83,27.5]} >\r\n          <Geographies geography={geoUrl} >\r\n            {({ geographies }) =>\r\n              geographies.map(geo => (\r\n                <Geography\r\n                  key={geo.rsmKey}\r\n                  geography={geo}\r\n                  onClick ={()=>{change_county(geo.properties.NAME);}}\r\n                  onMouseEnter={ async () => {\r\n                    let confirmed;\r\n                    let deaths;\r\n                    let counties = await Counties();\r\n            \r\n                    const name = geo.properties.NAME;\r\n                    for(let i=0;i<counties.length;i++)\r\n                    {\r\n                      if(name == counties[i].admin2)\r\n                      {\r\n                        confirmed = counties[i].confirmed;\r\n                        deaths =  counties[i].deaths;\r\n                      }\r\n                    }\r\n                    setTooltipContent(`${name} County <br/> Confirmed cases: ${confirmed} <br/>\r\n                      Deaths: ${deaths}`);\r\n                  }}\r\n                  onMouseLeave={() => {\r\n                    setTooltipContent(\"\");\r\n                  }}\r\n                  style={{\r\n                    default: {\r\n                      fill: \"black\",\r\n                      outline: \"none\"\r\n                    },\r\n                    hover: {\r\n                      fill: \"#F53\",\r\n                      outline: \"none\"\r\n                    },\r\n                    pressed: {\r\n                      fill: \"#E42\",\r\n                      outline: \"none\"\r\n                    }\r\n                  }}\r\n                />\r\n              ))\r\n            }\r\n          </Geographies>\r\n          </ZoomableGroup>\r\n      </ComposableMap>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default memo(MapChart);\r\n","import React, { useState } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport ReactTooltip from \"react-tooltip\";\r\nimport navigation from './_nav';\r\n\r\n\r\nimport MapChart from \"./MapChart\";\r\n\r\nfunction Florida() {\r\n  const [content, setContent] = useState(\"\");\r\n  return (\r\n    <div >\r\n      <MapChart  setTooltipContent={setContent} />\r\n      <ReactTooltip multiline={true} html={true}>{content}</ReactTooltip>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Florida;\r\n","/*\r\n* required polyfills\r\n*/\r\nimport \"core-js\";\r\nimport 'core-js/features/set/map';\r\n\r\n/** IE9, IE10 and IE11 requires all of the following polyfills. **/\r\n// import 'core-js/es/symbol'\r\n// import 'core-js/es/object'\r\n// import 'core-js/es/function'\r\n// import 'core-js/es/parse-int'\r\n// import 'core-js/es/parse-float'\r\n// import 'core-js/es/number'\r\n// import 'core-js/es/math'\r\n// import 'core-js/es/string'\r\n// import 'core-js/es/date'\r\n// import 'core-js/es/array'\r\n// import 'core-js/es/regexp'\r\n// import 'core-js/es/map'\r\n// import 'core-js/es/weak-map'\r\n// import 'core-js/es/set'\r\n// import 'core-js/es/object'\r\n\r\n/** IE10 and IE11 requires the following for the Reflect API. */\r\n// import 'core-js/es/reflect'\r\n\r\n/** Evergreen browsers require these. **/\r\n// Used for reflect-metadata in JIT. If you use AOT (and only Angular decorators), you can remove.\r\n// import 'core-js/es/reflect'\r\n\r\n// CustomEvent() constructor functionality in IE9, IE10, IE11\r\n(function () {\r\n\r\n  if ( typeof window.CustomEvent === \"function\" ) return false\r\n\r\n  function CustomEvent ( event, params ) {\r\n    params = params || { bubbles: false, cancelable: false, detail: undefined }\r\n    var evt = document.createEvent( 'CustomEvent' )\r\n    evt.initCustomEvent( event, params.bubbles, params.cancelable, params.detail )\r\n    return evt\r\n  }\r\n\r\n  CustomEvent.prototype = window.Event.prototype\r\n\r\n  window.CustomEvent = CustomEvent\r\n})()\r\n","import React, { Component } from 'react';\r\nimport { HashRouter, Route, Switch } from 'react-router-dom';\r\n// import { renderRoutes } from 'react-router-config';\r\nimport './App.scss';\r\nimport Florida from \"./florida\";\r\n\r\nconst loading = () => <div className=\"animated fadeIn pt-3 text-center\">Loading...</div>;\r\n\r\n// Containers\r\nconst DefaultLayout = React.lazy(() => import('./containers/DefaultLayout'));\r\n\r\n// Pages\r\nconst Login = React.lazy(() => import('./views/Pages/Login'));\r\nconst Register = React.lazy(() => import('./views/Pages/Register'));\r\nconst Page404 = React.lazy(() => import('./views/Pages/Page404'));\r\nconst Page500 = React.lazy(() => import('./views/Pages/Page500'));\r\n\r\nclass App extends Component {\r\n\r\n  render() {\r\n    return (\r\n      <HashRouter>\r\n          <React.Suspense fallback={loading()}>\r\n            <Switch>\r\n              <Route exact path=\"/404\" name=\"Page 404\" render={props => <Page404 {...props}/>} />\r\n              <Route exact path=\"/500\" name=\"Page 500\" render={props => <Page500 {...props}/>} />\r\n              <Route path=\"/\" name=\"Home\" render={props =><DefaultLayout {...props}/>} />\r\n            </Switch>\r\n          </React.Suspense>\r\n      </HashRouter>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log('New content is available; please refresh.');\r\n\r\n              // Execute callback\r\n              if (config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import 'react-app-polyfill/ie9'; // For IE 9-11 support\r\nimport 'react-app-polyfill/stable';\r\n// import 'react-app-polyfill/ie11'; // For IE 11 support\r\nimport './polyfill'\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}